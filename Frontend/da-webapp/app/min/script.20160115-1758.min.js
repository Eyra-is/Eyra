/*! data-acquisition-toolbox - v0.0.0 -                  2016-01-15 */
"use strict";function authenticationService($auth){function login(user){return $auth.login(user)}function loggedIn(){return $auth.isAuthenticated()}function logout(){$auth.logout()}var authHandler={};return authHandler.loggedIn=loggedIn,authHandler.login=login,authHandler.logout=logout,authHandler}function dataService(){function set(key,value){return"string"!=typeof key?!1:(data[key]=value,!0)}function get(key){return"string"!=typeof key?!1:data[key]}var dataHandler={};dataHandler.set=set,dataHandler.get=get;var data={};return dataHandler}function deliveryService($http,$q,logger,localDbMiscService,localDbService,utilityService){function deliverSession(session){submitRecordings(session.metadata,session.recordings).then(function(response){logger.log("Sent session."),logger.log(response),sendLocalSession(null)},function(response){logger.log("Failed sending session, trying again."),failedSessionSends++,sendLocalSession(session),util.stdErrCallback(response)})}function sendLocalSession(lastSession){return failedSessionSends>4?(logger.log("Failed sending session too many times. Aborting sync..."),failedSessionSends=0,void dbService.saveSession(lastSession).then(function(successfulSave){reqHandler.syncDoneCallback(!1)},util.stdErrCallback)):lastSession?void deliverSession(lastSession):void dbService.countAvailableSessions().then(function(availSessions){availSessions>0?(logger.log("Sending session as part of sync..."),dbService.pullSession().then(function(session){deliverSession(session)},util.stdErrCallback)):(alert("All synced up!"),failedSessionSends=0,reqHandler.syncDoneCallback(!0))},util.stdErrCallback)}function sendLocalSessions(callback){reqHandler.syncDoneCallback=callback,sendLocalSession(null)}function getTokens(numTokens){return $http({method:"GET",url:"//"+BACKENDURL+TOKENURL+"/"+numTokens})}function submitDevice(device){return device.userAgent||(device.userAgent=navigator.userAgent),submitGeneralJson(device,"/submit/general/device")}function submitGeneralJson(jsonData,url){var fd=new FormData,validSubmit=!1;try{fd.append("json",JSON.stringify(jsonData)),validSubmit=!0}catch(e){logger.error(e)}return validSubmit?$http.post("//"+BACKENDURL+url,fd,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}):$q.reject("Error submitting data.")}function submitInstructor(instructorData){return submitGeneralJson(instructorData,"/submit/general/instructor")}function submitRecordings(sessionData,recordings){var fd=new FormData,validSubmit=!1;try{fd.append("json",JSON.stringify(sessionData));for(var i=0;i<recordings.length;i++){var rec=recordings[i],tokenId=sessionData.data.recordingsInfo[rec.title].tokenId;rec.title!==invalidTitle&&0!==tokenId&&(fd.append("rec"+i,rec.blob,rec.title),validSubmit=!0)}}catch(e){logger.error(e)}return validSubmit?$http.post("//"+BACKENDURL+"/submit/session",fd,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}):$q.reject("No valid recordings in submission, not sending anything.")}function testServerGet(){return $http({method:"GET",url:"//"+BACKENDURL+"/submit/session"})}var reqHandler={},dbService=localDbService,util=utilityService;reqHandler.sendLocalSessions=sendLocalSessions,reqHandler.getTokens=getTokens,reqHandler.submitDevice=submitDevice,reqHandler.submitInstructor=submitInstructor,reqHandler.submitRecordings=submitRecordings,reqHandler.testServerGet=testServerGet;var TOKENURL="/submit/gettokens",invalidTitle=util.getConstant("invalidTitle"),failedSessionSends=0;return reqHandler}function localDbService($q,logger,myLocalForageService,utilityService){function addRecording(prevSessionData,sessionData,sessionIdx,recordings,recording){var newSessionData;prevSessionData?(prevSessionData.data.recordingsInfo[recording.title]=sessionData.data.recordingsInfo[recording.title],newSessionData=prevSessionData):newSessionData=sessionData;var blobIdx=0;recordings&&0!==recordings.length?blobIdx=util.getIdxFromPath(recordings[recordings.length-1].blobPath)+1:(recordings=[],blobIdx=0);var blobPath=sessionsPath+sessionIdx+"/"+blobsPrefix+blobIdx;return recordings.push({blobPath:blobPath,title:recording.title}),lfService.setItem(blobPath,recording.blob).then(angular.noop,util.stdErrCallback),{metadata:newSessionData,recordings:recordings}}function addNewSession(sessionData,recording,sessionIdxs){var idx=0;sessionIdxs.length>0&&(idx=util.getIdxFromPath(sessionIdxs[sessionIdxs.length-1])+1);var sessionObject=addRecording(null,sessionData,idx,[],recording);lfService.setItem(sessionsPath+idx,sessionObject).then(function(value){sessionIdxs.push(sessionsPath+idx),lfService.setItem(sessionIdxsPath,sessionIdxs).then(angular.noop,util.stdErrCallback)},util.stdErrCallback)}function clearLocalDb(){return logger.log("Deleting entire local database..."),lfService.clear()}function countAvailableSessions(){var isAvail=$q.defer();return lfService.getItem(sessionIdxsPath).then(function(value){value&&value.length>0?isAvail.resolve(value.length):isAvail.resolve(0)},function(response){isAvail.reject(response)}),isAvail.promise}function isSameSession(sessionData,prevSessionData){try{var data=sessionData.data,prevData=prevSessionData.data;return data.speakerId===prevData.speakerId&&data.instructorId===prevData.instructorId&&data.deviceId===prevData.deviceId&&data.location===prevData.location&&data.start===prevData.start}catch(e){return logger.error("Invalid format of sessionData or prevSessionData"),util.stdErrCallback(e),!1}}function popSessionIdxs(sessionIdxs){return logger.error("Invalid session idx: "+sessionIdxs[sessionIdxs.length-1]+", deleting index."),lfService.setItem(sessionIdxsPath,sessionIdxs.slice(0,sessionIdxs.length-1))}function pullSession(){function failedPullCallback(response){pulledSession.reject(response)}logger.log("Getting session data...");var pulledSession=$q.defer();return lfService.getItem(sessionIdxsPath).then(function(sessionIdxs){lfService.pull(sessionIdxs[sessionIdxs.length-1]).then(function(session){return session?void lfService.setItem(sessionIdxsPath,sessionIdxs.slice(0,sessionIdxs.length-1)).then(function(sessionIdxs){for(var recordings=session.recordings,blobPromises=[],i=0;i<recordings.length;i++)blobPromises.push(lfService.getItem(recordings[i].blobPath));$q.all(blobPromises).then(function(blobs){for(var i=0;i<blobs.length;i++)lfService.removeItem(recordings[i].blobPath).then(angular.noop,util.stdErrCallback),delete recordings[i].blobPath,recordings[i].blob=blobs[i];pulledSession.resolve(session)},failedPullCallback)},failedPullCallback):void popSessionIdxs(sessionIdxs).then(angular.noop,failedPullCallback)},failedPullCallback)},failedPullCallback),pulledSession.promise}function saveRecording(sessionData,recording){logger.log("Saving rec locally."),lfService.getItem(sessionIdxsPath).then(function(value){var sessionIdxs;if(sessionIdxs=value?value:[],sessionIdxs.length>0){var prevSessionIdx=sessionIdxs.length-1;lfService.getItem(sessionIdxs[prevSessionIdx]).then(function(session){if(!session)return void popSessionIdxs(sessionIdxs).then(angular.noop,util.stdErrCallback);var prevSessionData=session.metadata;if(isSameSession(sessionData,prevSessionData)){var sessionIdx=util.getIdxFromPath(sessionIdxs[prevSessionIdx]),sessionObject=addRecording(prevSessionData,sessionData,sessionIdx,session.recordings,recording);lfService.setItem(sessionIdxs[prevSessionIdx],sessionObject).then(angular.noop,util.stdErrCallback)}else addNewSession(sessionData,recording,sessionIdxs)},util.stdErrCallback)}else addNewSession(sessionData,recording,sessionIdxs)},util.stdErrCallback)}function saveSession(session){function failedSaveCallback(response){successfulSave.reject(response)}var successfulSave=$q.defer();return lfService.getItem(sessionIdxsPath).then(function(sessionIdxs){var sessionIdx;sessionIdx=sessionIdxs&&sessionIdxs.length>0?util.getIdxFromPath(sessionIdxs[sessionIdxs.length-1])+1:0;for(var newSession,newRecs=[],recs=session.recordings,i=0;i<recs.length;i++)newSession=addRecording(null,null,sessionIdx,newRecs,recs[i]),newRecs=newSession.recordings;var sessionPath=sessionsPath+sessionIdx;lfService.setItem(sessionPath,{metadata:session.metadata,recordings:newRecs}).then(function(value){sessionIdxs.push(sessionPath),lfService.setItem(sessionIdxsPath,sessionIdxs).then(function(sessionIdxs){successfulSave.resolve(!0)},failedSaveCallback)},failedSaveCallback)},failedSaveCallback),successfulSave.promise}var dbHandler={},lfService=myLocalForageService,util=utilityService;dbHandler.clearLocalDb=clearLocalDb,dbHandler.countAvailableSessions=countAvailableSessions,dbHandler.pullSession=pullSession,dbHandler.saveRecording=saveRecording,dbHandler.saveSession=saveSession;var lfPrefix="localDb/",sessionIdxsPath=lfPrefix+"sessionIdxs",sessionsPath=lfPrefix+"sessions/",blobsPrefix="blobs/";return dbHandler}function localDbMiscService($q,dataService,logger,myLocalForageService,utilityService){function getDevice(){return lfService.getItem(devicePath)}function setDevice(device){return lfService.setItem(devicePath,device)}function getInstructorId(){return lfService.getItem(instructorIdPath)}function setInstructorId(instructorId){return lfService.setItem(instructorIdPath,instructorId)}function getSpeaker(speakerName){return lfService.getItem(speakersPrefix+speakerName)}function setSpeaker(speakerName,speakerInfo){var device=dataService.get("device");if(device&&device.imei&&""!==device.imei)return speakerInfo.deviceImei=device.imei,lfService.setItem(speakersPrefix+speakerName,speakerInfo);var res=$q.defer();return getDevice().then(function(device){device&&device.imei&&""!==device.imei&&(speakerInfo.deviceImei=device.imei),$q.resolve(lfService.setItem(speakersPrefix+speakerName,speakerInfo))},function(response){$q.resolve(lfService.setItem(speakersPrefix+speakerName,speakerInfo)),logger.error(response)}),res.promise}var dbHandler={},lfService=myLocalForageService;dbHandler.getDevice=getDevice,dbHandler.setDevice=setDevice,dbHandler.getInstructorId=getInstructorId,dbHandler.setInstructorId=setInstructorId,dbHandler.getSpeaker=getSpeaker,dbHandler.setSpeaker=setSpeaker;var devicePath="device",instructorIdPath="instructorId",speakersPrefix="speakers/";return dbHandler}function logger(myLocalForageService){function log(arg){if("object"==typeof arg)try{arg=JSON.stringify(arg,null,4)}catch(e){angluar.noop()}console.log(arg),save(arg)}function error(arg){if("object"==typeof arg){if(arg.message)return console.log(arg),void save("Error: "+arg.message+", Stack: "+arg.stack);try{arg=JSON.stringify(arg,null,4)}catch(e){angluar.noop()}}var msg="Error: ";console.log(msg+arg),save(msg+arg)}function getLogs(){return lfService.getItem(LOGKEY)}function save(arg){lfService.getItem(LOGKEY).then(function(logs){lfService.setItem(LOGKEY,logs+arg+"\n")})}var logHandler={},lfService=myLocalForageService;logHandler.error=error,logHandler.getLogs=getLogs,logHandler.log=log;var LOGKEY="logs";return logHandler}function myLocalForageService($localForage){function inProgress(){return lfInProgress}function generalWrapper(fn){lfInProgress=!0;for(var args=[],i=1;i<arguments.length;i++)args.push(arguments[i]);return fn.apply($localForage,args).then(function(val){return lfInProgress=!1,val},function(error){return lfInProgress=!1,error})}function setItem(key,value){return generalWrapper($localForage.setItem,key,value)}function getItem(key){return generalWrapper($localForage.getItem,key)}function removeItem(key){return generalWrapper($localForage.removeItem,key)}function pull(key){return generalWrapper($localForage.pull,key)}function clear(){return generalWrapper($localForage.clear)}var lfHandler={};lfHandler.inProgress=inProgress,lfHandler.setItem=setItem,lfHandler.getItem=getItem,lfHandler.removeItem=removeItem,lfHandler.pull=pull,lfHandler.clear=clear;var lfInProgress=!1;return lfHandler}function recordingService(logger,utilityService){function init(initCompleteCallback){recHandler.initCompleteCallback=initCompleteCallback;try{window.AudioContext=window.AudioContext||window.webkitAudioContext,navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia,window.URL=window.URL||window.webkitURL,audio_context=new AudioContext,logger.log("Audio context set up."),logger.log("navigator.getUserMedia "+(navigator.getUserMedia?"available.":"not present!"))}catch(e){alert("No web audio support in this browser!")}navigator.getUserMedia({audio:!0},startUserMedia,function(e){logger.error("No live audio input: "+e),recHandler.initCompleteCallback(!1)})}function record(){logger.log("Recording..."),recorder&&recorder.record()}function setupCallbacks(updateBindingsCallback,recordingCompleteCallback){recHandler.updateBindingsCallback=updateBindingsCallback,recHandler.recordingCompleteCallback=recordingCompleteCallback}function stop(){recorder&&recorder.stop(),logger.log("Stopped recording."),createWav(),recorder.clear()}function createWav(){recorder&&recorder.exportWAV(function(blob){var url=URL.createObjectURL(blob);recHandler.prevRecTitle=recHandler.currentRecording[0].title,recHandler.currentRecording[0]={blob:blob,url:url,title:(new Date).toISOString()+".wav"},recHandler.updateBindingsCallback(),recHandler.recordingCompleteCallback()})}function startUserMedia(stream){var input=audio_context.createMediaStreamSource(stream);logger.log("Media stream created."),recorder=new Recorder(input),logger.log("Recorder initialised."),recHandler.initCompleteCallback(!0)}var recHandler={},util=utilityService;recHandler.init=init,recHandler.record=record,recHandler.setupCallbacks=setupCallbacks,recHandler.stop=stop,recHandler.currentRecording=[{blob:new Blob,url:"",title:invalidTitle}];var audio_context,recorder,invalidTitle=util.getConstant("invalidTitle");return recHandler}function routeService($location,$q,$rootScope,authenticationService,logger){function appInitialized(){return $rootScope.appInitialized?$q.when(!0):$q.reject("App is not initialized.")}function loggedIn(){return authService.loggedIn()?$q.when(!0):$q.reject("Access denied, no one logged in.")}function routeError(eventInfo,data){$rootScope.appInitialized?authService.loggedIn()||(logger.log("Access denied, no one logged in, going to login page."),$location.path("/login")):(logger.log("App not initialized, going back to main page."),$location.path("/main"))}var routeHandler={},authService=authenticationService;return $rootScope.$on("$routeChangeError",routeError),routeHandler.appInitialized=appInitialized,routeHandler.loggedIn=loggedIn,routeHandler}function sessionService($q,dataService,localDbMiscService,logger){function assembleSessionData(rec,tokenId){var sessionData=$q.defer();return getPossiblyAsyncData().then(function(data){var end_time=(new Date).toISOString(),speakerInfoFallback={name:"No user.",gender:"Other",height:"1337",dob:"19 B.C.",deviceImei:""},instructorIdFallback=1,deviceInfoFallback={userAgent:navigator.userAgent,imei:""},tempSessionData={type:"session",data:{speakerInfo:data.speakerInfo||speakerInfoFallback,instructorId:data.instructorId||instructorIdFallback,deviceInfo:data.deviceInfo||deviceInfoFallback,location:dataService.get("location")||"Unknown.",start:start_time||"No start time set. (error)",end:end_time,comments:dataService.get("comments")||"No comments.",recordingsInfo:{}}};tempSessionData.data.recordingsInfo[rec.title]={tokenId:tokenId},sessionData.resolve(tempSessionData)},function(response){sessionData.reject(response)}),sessionData.promise}function getGeneralInfo(key,returnPromise,dbServiceFunction,dbServiceArg){var keyInfo=dataService.get(key);keyInfo?returnPromise.resolve(keyInfo):dbServiceFunction(dbServiceArg).then(function(info){returnPromise.resolve(info)},function(response){returnPromise.resolve(void 0),logger.error(response)})}function getPossiblyAsyncData(){var speakerInfoPromise=$q.defer(),instructorIdPromise=$q.defer(),deviceInfoPromise=$q.defer(),dataPromises={speakerInfo:speakerInfoPromise.promise,instructorId:instructorIdPromise.promise,deviceInfo:deviceInfoPromise.promise},speakerName=dataService.get("speakerName");return speakerName||(speakerName=void 0),getGeneralInfo("speakerInfo",speakerInfoPromise,dbService.getSpeaker,speakerName),getGeneralInfo("instructorId",instructorIdPromise,dbService.getInstructorId,void 0),getGeneralInfo("deviceInfo",deviceInfoPromise,dbService.getDevice,void 0),$q.all(dataPromises)}function setStartTime(time){start_time=time}var start_time,sessionHandler={},dbService=localDbMiscService;return sessionHandler.setStartTime=setStartTime,sessionHandler.assembleSessionData=assembleSessionData,sessionHandler}function tokenService($q,deliveryService,logger,myLocalForageService,utilityService){function countAvailableTokens(){var isAvail=$q.defer();return lfService.getItem("minFreeTokenIdx").then(function(idx){idx&&idx>=0?isAvail.resolve(idx+1):isAvail.resolve(0)},function(response){isAvail.reject(response)}),isAvail.promise}function getTokens(numTokens){var tokensPromise=$q.defer();return delService.getTokens(numTokens).then(function(response){var tokens=response.data;tokens&&tokens.length>0?saveTokens(tokens,tokensPromise):tokensPromise.reject("Tokens from server not on right format or empty.")},function(data){tokensPromise.reject(data)}),tokensPromise.promise}function nextToken(){var next=$q.defer();return lfService.getItem("minFreeTokenIdx").then(function(value){logger.log("Local db index: "+value);var minFreeIdx=-1===value?0:value||0;lfService.getItem("tokens/"+minFreeIdx).then(function(value){value?next.resolve(value):next.resolve({id:0,token:"No more tokens. Hit 'Get tokens' for more."}),minFreeIdx>-1&&minFreeIdx--,lfService.setItem("minFreeTokenIdx",minFreeIdx).then(function(value){lfService.removeItem("tokens/"+(minFreeIdx+1)).then(angular.noop,util.stdErrCallback)},util.stdErrCallback)},util.stdErrCallback)},util.stdErrCallback),next.promise}function saveTokens(tokens,tokensPromise){lfService.getItem("minFreeTokenIdx").then(function(value){for(var minFreeIdx=-1===value?0:value||0,oldMinFreeIdx=minFreeIdx,finishedPromises=[],i=0;i<tokens.length;i++)finishedPromises.push(lfService.setItem("tokens/"+minFreeIdx,tokens[i])),minFreeIdx++;finishedPromises.push(lfService.setItem("minFreeTokenIdx",oldMinFreeIdx+(tokens.length-1))),$q.all(finishedPromises).then(function(val){tokensPromise.resolve(tokens)},function(data){tokensPromise.reject(data)})},function(data){tokensPromise.reject(data)})}var tokenHandler={},delService=deliveryService,lfService=myLocalForageService,util=utilityService;return tokenHandler.countAvailableTokens=countAvailableTokens,tokenHandler.getTokens=getTokens,tokenHandler.nextToken=nextToken,tokenHandler}function utilityService(logger){function getConstant(constant){return CONSTANTS[constant]}function getIdxFromPath(path){var idx=-1;try{var tokens=path.split("/");idx=parseInt(tokens[tokens.length-1]),idx||0===idx||(idx=-1)}catch(e){logger.error(e)}return idx}function stdErrCallback(arg){logger.error(arg)}var utilityHandler={},CONSTANTS={invalidTitle:"no_data.wav",defaultSpeakerName:"speaker"};return utilityHandler.getConstant=getConstant,utilityHandler.getIdxFromPath=getIdxFromPath,utilityHandler.stdErrCallback=stdErrCallback,utilityHandler}function LoginController($http,$location,$scope,authenticationService,logger){function submit(){authService.login({email:$scope.email,password:$scope.password}).then(function(res){alert("Logged in successfully!"),$location.path("/more")},function(res){$scope.msg="Failed to login.",logger.error(res)})}var loginCtrl=this,authService=authenticationService;loginCtrl.submit=submit,$scope.email="",$scope.password="",$scope.isLoaded=!0}function MainController($location,$q,$rootScope,$scope,$window,logger,myLocalForageService,recordingService,routeService,tokenService,utilityService){function init(){$window.addEventListener("beforeunload",function(e){if(lfService.inProgress()){var msg="Are you sure you want to navigate away?\n                     There is still possibly important processing going on in the app.";return(e||$window.event).returnValue=msg,msg}}),recService.init(recServiceInitDoneCallback),getTokensIfNeeded(),$q.all(initPromises).then(function(tasksComplete){$rootScope.appInitialized=!0,logger.log("App initialized."),$scope.isLoaded=!0},function(data){$scope.msg="App failed to initialize. Try refreshing the page and check your connection.",util.stdErrCallback(data)})}function getTokensIfNeeded(){tokenService.countAvailableTokens().then(function(numTokens){50>numTokens?(logger.log("Getting tokens.."),tokenService.getTokens(100).then(function(tokens){tokensPromise.resolve(!0),logger.log("Got tokens.")},function(data){tokensPromise.reject(data),logger.log("Failed getting tokens."),logger.error(data)})):tokensPromise.resolve(!1)},function(data){tokensPromise.reject(data),logger.error(data)})}function recServiceInitDoneCallback(result){result?recorderPromise.resolve(!0):recorderPromise.reject("Recorder not initialized.")}function start(){$location.path("/start")}function more(){$location.path("/more")}var mainCtrl=this,lfService=myLocalForageService,recService=recordingService,util=utilityService;mainCtrl.start=start,mainCtrl.more=more,$scope.msg="Loading...",$scope.isLoaded=!1;var recorderPromise,tokensPromise,initPromises;$rootScope.appInitialized?$scope.isLoaded=!0:(recorderPromise=$q.defer(),tokensPromise=$q.defer(),initPromises={recorder:recorderPromise.promise,tokens:tokensPromise.promise},init())}function MoreController($location,$scope,authenticationService,localDbService,logger,tokenService,utilityService){function addSpeaker(){$location.path("/start")}function logout(){authService.logout(),alert("Logged out successfully!")}function setInstructor(){$location.path("/set-instructor")}function registerDevice(){$location.path("/register-device")}function clearLocalDb(){confirm("Are you sure?\nThis will delete the entire local db, including tokens and recordings.")&&(moreCtrl.msg="Clearing entire local db...",dbService.clearLocalDb().then(function(val){alert("Database cleared!"),moreCtrl.msg="Database cleared."},util.stdErrCallback))}function getTokens(){moreCtrl.msg="Getting tokens...",tokenService.getTokens(25).then(function(tokens){alert("Tokens acquired!"),moreCtrl.msg="Tokens acquired."},util.stdErrCallback)}function test(){logger.getLogs().then(function(logs){console.log(logs)}),tokenService.countAvailableTokens().then(function(n){console.log(n)})}var moreCtrl=this,authService=authenticationService,dbService=localDbService,util=utilityService;moreCtrl.addSpeaker=addSpeaker,moreCtrl.clearLocalDb=clearLocalDb,moreCtrl.getTokens=getTokens,moreCtrl.registerDevice=registerDevice,moreCtrl.setInstructor=setInstructor,moreCtrl.test=test,moreCtrl.logout=logout,$scope.isLoaded=!0}function RecordingController($scope,dataService,deliveryService,localDbService,logger,recordingService,sessionService,tokenService,utilityService){function activate(){recService.setupCallbacks(updateBindingsCallback,recordingCompleteCallback),$scope.isLoaded=!0}function record(){recCtrl.msg="Recording now...",recCtrl.recordBtnDisabled=!0,recService.record(),recCtrl.stopBtnDisabled=!1,currentToken={id:0,token:"Waiting for new token..."},tokenService.nextToken().then(function(token){recCtrl.displayToken=token.token,currentToken=token},util.stdErrCallback)}function recordingCompleteCallback(){var oldCurRec=recCtrl.curRec[0];sessionService.assembleSessionData(oldCurRec,currentToken.id).then(function(sessionData){send(sessionData,oldCurRec).then(function(response){logger.log(response)},function(response){var rec=oldCurRec,tokenId=sessionData.data.recordingsInfo[rec.title].tokenId;rec.title!==invalidTitle&&0!==tokenId?(logger.log("Submitting recording to server was unsuccessful, saving locally..."),dbService.saveRecording(sessionData,{blob:rec.blob,title:rec.title})):logger.error("Invalid token in submission."),logger.error(response)})},util.stdErrCallback),recCtrl.recordBtnDisabled=!1}function send(sessionData,oldCurRec){return recCtrl.msg="Sending recs...",delService.testServerGet().then(function(response){logger.log(response)},function(response){logger.log(response)}),delService.submitRecordings(sessionData,[oldCurRec])}function stop(){recCtrl.msg="Processing wav...",recCtrl.stopBtnDisabled=!0,recService.stop()}function sync(){recCtrl.msg="Syncing...",recCtrl.syncBtnDisabled=!0,delService.sendLocalSessions(syncDoneCallback)}function syncDoneCallback(result){recCtrl.msg=result?"Sync complete.":"Sync failed.",recCtrl.syncBtnDisabled=!1}function updateBindingsCallback(){$scope.$apply()}var recCtrl=this,recService=recordingService,delService=deliveryService,dbService=localDbService,util=utilityService;recCtrl.record=record,recCtrl.stop=stop,recCtrl.sync=sync,recCtrl.msg="",recCtrl.curRec=recService.currentRecording,recCtrl.recordBtnDisabled=!1,recCtrl.stopBtnDisabled=!0,recCtrl.syncBtnDisabled=!1;var currentToken={id:0,token:"No token yet. Hit 'Record' to start"};recCtrl.displayToken=currentToken.token,sessionService.setStartTime((new Date).toISOString());var invalidTitle=util.getConstant("invalidTitle");activate()}function RegisterDeviceController($location,$scope,dataService,deliveryService,localDbMiscService,logger,utilityService){function submit(){if(regdCtrl.imei.length>0){var device={userAgent:navigator.userAgent,imei:regdCtrl.imei};dataService.set("device",device),delService.submitDevice(device).then(function(response){alert("Device info submitted!"),$location.path("/main")},function(response){regdCtrl.msg="Error submitting device.",logger.error(response)}),dbService.setDevice(device).then(angular.noop,util.stdErrCallback)}else logger.error("Error, no imei typed.")}var regdCtrl=this,delService=deliveryService,dbService=localDbMiscService,util=utilityService;regdCtrl.submit=submit,regdCtrl.imei="",$scope.isLoaded=!0}function SetInstructorController($location,$scope,dataService,deliveryService,localDbMiscService,logger,utilityService){function submit(){if(validateInputs(),0===setiCtrl.msgs.length){var instructorData={name:setiCtrl.name,email:setiCtrl.email,phone:setiCtrl.phone,address:setiCtrl.address};delService.submitInstructor(instructorData).then(function(response){try{var instructorId=response.data.instructorId;instructorId?(dataService.set("instructorId",instructorId),dbService.setInstructorId(instructorId).then(angular.noop,util.stdErrCallback),alert("Instructor submitted to database!"),$location.path("/main")):$scope.msg="Something went wrong."}catch(e){logger.error(e)}},function(response){$scope.msg="Error submitting instructor data.",logger.error(response)})}}function validateInputs(){}var setiCtrl=this,dbService=localDbMiscService,delService=deliveryService,util=utilityService;setiCtrl.submit=submit,setiCtrl.name="",setiCtrl.email="",setiCtrl.phone="",setiCtrl.address="",setiCtrl.msgs=[],$scope.isLoaded=!0}function SpeakerInfoController($location,$scope,dataService,localDbMiscService,utilityService){function submit(){if(""===sinfoCtrl.gender||""===sinfoCtrl.dob||""===sinfoCtrl.height)$scope.msg="Please fill out all entries.";else{var speakerInfo={name:speakerName,gender:sinfoCtrl.gender,dob:sinfoCtrl.dob,height:sinfoCtrl.height};dataService.set("speakerInfo",speakerInfo),dbService.setSpeaker(speakerName,speakerInfo).then(function(info){info&&dataService.set("speakerInfo",info)},function(value){logger.error("Failed setting speaker in local db, speakerName: "+speakerName+", speakerInfo: "+JSON.stringify(speakerInfo)+", with error: "+value)}),$location.path("/recording")}}var sinfoCtrl=this,util=utilityService,dbService=localDbMiscService;sinfoCtrl.submit=submit,$scope.isLoaded=!0,sinfoCtrl.gender="",sinfoCtrl.dob="",sinfoCtrl.height="";var speakerName=dataService.get("speakerName");speakerName&&""!==speakerName||(logger.error("No speaker name. Setting default."),speakerName=util.getConstant("defaultSpeakerName")),sinfoCtrl.genders=["Male","Female","Other"],sinfoCtrl.dobs=[];for(var year=(new Date).getFullYear(),interval=5,i=year-interval;i>=1950;i-=interval)sinfoCtrl.dobs.push(i+"-"+(i+interval-1));sinfoCtrl.dobs.push("< 1950"),sinfoCtrl.heights=["> 200"],interval=10;for(var i=200-interval;i>=140;i-=interval)sinfoCtrl.heights.push(i+"-"+(i+interval-1));sinfoCtrl.heights.push("< 140")}function StartController($location,$scope,dataService,localDbMiscService,logger,utilityService){function submit(){""===startCtrl.speakerName&&(logger.log("No speaker name set, using default."),startCtrl.speakerName=util.getConstant("defaultSpeakerName")),""===startCtrl.comments&&(startCtrl.comments="No comments."),dataService.set("speakerName",startCtrl.speakerName),dataService.set("comments",startCtrl.comments),dataService.set("doneBefore",startCtrl.doneBefore),dbService.getSpeaker(startCtrl.speakerName).then(function(speakerInfo){speakerInfo?(dataService.set("speakerInfo",speakerInfo),startCtrl.doneBefore?$location.path("/recording"):$scope.msg="Speaker already in database. Choose a different name, unless you have done this before on this device, then tick the box."):$location.path("/speaker-info")},function(value){$scope.msg="Something went wrong.",logger.error(value)})}var startCtrl=this,util=utilityService,dbService=localDbMiscService;startCtrl.submit=submit,startCtrl.speakerName="",startCtrl.comments="",startCtrl.doneBefore=!1,$scope.isLoaded=!0}angular.module("daApp").factory("authenticationService",authenticationService),authenticationService.$inject=["$auth"],angular.module("daApp").factory("dataService",dataService),angular.module("daApp").factory("deliveryService",deliveryService),deliveryService.$inject=["$http","$q","logger","localDbMiscService","localDbService","utilityService"],angular.module("daApp").factory("localDbService",localDbService),localDbService.$inject=["$q","logger","myLocalForageService","utilityService"],angular.module("daApp").factory("localDbMiscService",localDbMiscService),localDbMiscService.$inject=["$q","dataService","logger","myLocalForageService","utilityService"],angular.module("daApp").factory("logger",logger),logger.$inject=["myLocalForageService"],angular.module("daApp").factory("myLocalForageService",myLocalForageService),myLocalForageService.$inject=["$localForage"],angular.module("daApp").factory("recordingService",recordingService),recordingService.$inject=["logger","utilityService"],angular.module("daApp").factory("routeService",routeService),routeService.$inject=["$location","$q","$rootScope","authenticationService","logger"],angular.module("daApp").factory("sessionService",sessionService),sessionService.$inject=["$q","dataService","localDbMiscService","logger"],angular.module("daApp").factory("tokenService",tokenService),tokenService.$inject=["$q","deliveryService","logger","myLocalForageService","utilityService"],angular.module("daApp").factory("utilityService",utilityService),utilityService.$inject=["logger"],angular.module("daApp").controller("LoginController",LoginController),LoginController.$inject=["$http","$location","$scope","authenticationService","logger"],angular.module("daApp").controller("MainController",MainController),MainController.$inject=["$location","$q","$rootScope","$scope","$window","logger","myLocalForageService","recordingService","routeService","tokenService","utilityService"],angular.module("daApp").controller("MoreController",MoreController),MoreController.$inject=["$location","$scope","authenticationService","localDbService","logger","tokenService","utilityService"],angular.module("daApp").controller("RecordingController",RecordingController),RecordingController.$inject=["$scope","dataService","deliveryService","localDbService","logger","recordingService","sessionService","tokenService","utilityService"],angular.module("daApp").controller("RegisterDeviceController",RegisterDeviceController),RegisterDeviceController.$inject=["$location","$scope","dataService","deliveryService","localDbMiscService","logger","utilityService"],angular.module("daApp").controller("SetInstructorController",SetInstructorController),SetInstructorController.$inject=["$location","$scope","dataService","deliveryService","localDbMiscService","logger","utilityService"],
angular.module("daApp").controller("SpeakerInfoController",SpeakerInfoController),SpeakerInfoController.$inject=["$location","$scope","dataService","localDbMiscService","utilityService"],angular.module("daApp").controller("StartController",StartController),StartController.$inject=["$location","$scope","dataService","localDbMiscService","logger","utilityService"];
//# sourceMappingURL=../../sourceMap.map